Description: add snap policy module
Author: James Henstridge <james.henstridge@canonical.com>
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1895928
Last-Update: 2020-10-08

Index: pulseaudio/configure.ac
===================================================================
--- pulseaudio.orig/configure.ac
+++ pulseaudio/configure.ac
@@ -1486,13 +1486,11 @@ AS_IF([test "x$ax_pthread_ok" = "xyes"],
 AC_ARG_ENABLE([snap],
     AS_HELP_STRING([--enable-snap], [Enable snap support]))
 
-have_apparmor=0
 have_snapd_glib=0
 AS_IF([test "x$enable_snap" != "xno"],
-    [PKG_CHECK_MODULES(APPARMOR, [libapparmor], [have_apparmor=1])
-     PKG_CHECK_MODULES(SNAPD_GLIB, [snapd-glib glib-2.0 gio-2.0], [have_snapd_glib=1])])
+    [PKG_CHECK_MODULES(SNAPD_GLIB, [snapd-glib glib-2.0 gio-2.0], [have_snapd_glib=1])])
 
-AS_IF([test "x$enable_snap" = "xyes" && test "x$have_apparmor" = "x0" -o "x$have-snapd_glib" = "x0"],
+AS_IF([test "x$enable_snap" = "xyes" && test "x$have-snapd_glib" = "x0"],
     [AC_MSG_ERROR([*** Snap module dependencies missing])])
 
 AM_CONDITIONAL([BUILD_SNAP], [test "x$enable_snap" = "xyes"])
Index: pulseaudio/src/Makefile.am
===================================================================
--- pulseaudio.orig/src/Makefile.am
+++ pulseaudio/src/Makefile.am
@@ -2086,8 +2086,8 @@ endif
 if BUILD_SNAP
 module_snap_policy_la_SOURCES = modules/module-snap-policy.c
 module_snap_policy_la_LDFLAGS = $(MODULE_LDFLAGS)
-module_snap_policy_la_LIBADD = $(MODULE_LIBADD) $(APPARMOR_LIBS) $(SNAPD_GLIB_LIBS)
-module_snap_policy_la_CFLAGS = $(AM_CFLAGS) $(APPARMOR_CFLAGS) $(SNAPD_GLIB_CFLAGS) -DPA_MODULE_NAME=module_snap_policy
+module_snap_policy_la_LIBADD = $(MODULE_LIBADD) $(SNAPD_GLIB_LIBS)
+module_snap_policy_la_CFLAGS = $(AM_CFLAGS) $(SNAPD_GLIB_CFLAGS) -DPA_MODULE_NAME=module_snap_policy
 endif
 
 # RTP modules
Index: pulseaudio/src/modules/module-snap-policy.c
===================================================================
--- pulseaudio.orig/src/modules/module-snap-policy.c
+++ pulseaudio/src/modules/module-snap-policy.c
@@ -1,7 +1,7 @@
 /***
     This file is part of PulseAudio.
 
-    Copyright 2018 Canonical Ltd.
+    Copyright 2020 Canonical Ltd.
     Authors:
       Simon Fels <simon.fels@canonical.com>
       James Henstridge <james.henstridge@canonical.com>
@@ -24,7 +24,6 @@
 #include <config.h>
 #endif
 
-#include <sys/apparmor.h>
 #include <glib.h>
 #include <snapd-glib/snapd-glib.h>
 
@@ -46,13 +45,19 @@ PA_MODULE_DESCRIPTION("Ubuntu Snap polic
 PA_MODULE_VERSION(PACKAGE_VERSION);
 PA_MODULE_LOAD_ONCE(true);
 
+typedef enum snap_access {
+    SNAP_ACCESS_NONE    = 0,
+    SNAP_ACCESS_RECORD  = 1 << 0,
+    SNAP_ACCESS_CONTROL = 1 << 1,
+} snap_access_t;
+
 struct per_client {
     struct userdata *userdata;
     uint32_t index;
     char *snap_name;
     pa_dynarray *pending_requests; /* of pa_access_data */
     bool completed;
-    bool grant_access;
+    snap_access_t access;
 };
 
 struct userdata {
@@ -80,12 +85,12 @@ struct userdata {
 
 /* ---- Code running in glib thread ---- */
 
-static void complete_check_access(struct per_client *pc, bool grant_access)
+static void complete_check_access(struct per_client *pc, snap_access_t access)
 {
     struct userdata *u = pc->userdata;
 
     pa_mutex_lock(u->mutex);
-    pc->grant_access = grant_access;
+    pc->access = access;
     pc->completed = true;
     pa_asyncq_push(u->results, pc, true);
     pa_mutex_unlock(u->mutex);
@@ -97,7 +102,7 @@ static void get_connections_finished(GOb
 {
     struct per_client *pc = user_data;
     struct userdata *u = pc->userdata;
-    bool grant_access = false;
+    snap_access_t access = SNAP_ACCESS_NONE;
     g_autoptr(GError) error = NULL;
     g_autoptr(GPtrArray) established = NULL;
     unsigned i;
@@ -107,7 +112,7 @@ static void get_connections_finished(GOb
         goto end;
     }
 
-    /* determine pc->grant_access */
+    /* determine pc->access */
     for (i = 0; i < established->len; i++) {
         SnapdConnection *conn = established->pdata[i];
         SnapdPlugRef *plug = snapd_connection_get_plug(conn);
@@ -119,13 +124,13 @@ static void get_connections_finished(GOb
             continue;
         }
         if (!strcmp(iface, "pulseaudio") || !strcmp(iface, "audio-record")) {
-            grant_access = true;
+            access |= SNAP_ACCESS_RECORD;
             break;
         }
     }
 
 end:
-    complete_check_access(pc, grant_access);
+    complete_check_access(pc, access);
 }
 
 static void get_snap_finished(GObject *source_object,
@@ -140,13 +145,13 @@ static void get_snap_finished(GObject *s
     snap = snapd_client_get_snap_finish(u->snapd, result, &error);
     if (!snap) {
         pa_log_warn("snapd_client_get_snap failed: %s", error->message);
-        complete_check_access(pc, false);
+        complete_check_access(pc, SNAP_ACCESS_NONE);
         return;
     }
 
     /* Snaps using classic confinement are granted access */
     if (snapd_snap_get_confinement(snap) == SNAPD_CONFINEMENT_CLASSIC) {
-        complete_check_access(pc, true);
+        complete_check_access(pc, SNAP_ACCESS_RECORD | SNAP_ACCESS_CONTROL);
         return;
     }
 
@@ -216,7 +221,7 @@ static struct per_client *per_client_new
     pc->snap_name = snap_name;
     pc->pending_requests = pa_dynarray_new(NULL);
     pc->completed = false;
-    pc->grant_access = false;
+    pc->access = SNAP_ACCESS_NONE;
     return pc;
 }
 
@@ -229,46 +234,34 @@ static void per_client_free(struct per_c
 
 static char *client_get_snap_name(pa_core *core, uint32_t client_index) {
     pa_client *client;
-    char *context = NULL;
-    char *snap_name = NULL;
+    char *label = NULL;
     char *dot;
 
     client = pa_idxset_get_by_index(core->clients, client_index);
     pa_assert(client != NULL);
-    if (!client->creds_valid) {
-        pa_log_warn("Client %u has no creds, cannot authenticate", client_index);
-        goto end;
-    }
-
-    /* If AppArmor is not enabled, then we can't identify the client */
-    if (!aa_is_enabled()) {
-        goto end;
-    }
-    if (aa_gettaskcon(client->creds.pid, &context, NULL) < 0) {
-        pa_log_error("AppArmor profile could not be retrieved.");
-        goto end;
+    if (client->apparmor_label == NULL) {
+        return NULL;
     }
 
     /* If the AppArmor context does not begin with "snap.", then this
      * is not a snap */
-    if (strncmp(context, SNAP_LABEL_PREFIX, SNAP_LABEL_PREFIX_LENGTH) != 0) {
-        goto end;
+    label = client->apparmor_label;
+    if (strncmp(label, SNAP_LABEL_PREFIX, SNAP_LABEL_PREFIX_LENGTH) != 0) {
+        return NULL;
     }
+    label += SNAP_LABEL_PREFIX_LENGTH;
 
-    dot = strchr(context+SNAP_LABEL_PREFIX_LENGTH, '.');
+    dot = strchr(label, '.');
     if (dot == NULL) {
-        pa_log_warn("Malformed snapd AppArmor profile name: %s", context);
-        goto end;
+        pa_log_warn("Malformed snapd AppArmor label: %s", client->apparmor_label);
+        return NULL;
     }
-    snap_name = pa_xstrndup(context+5, dot-context-SNAP_LABEL_PREFIX_LENGTH);
-
-end:
-    free(context);
-    return snap_name;
+    return pa_xstrndup(label, dot - label);
 }
 
-static pa_hook_result_t connect_record_hook(pa_core *core, pa_access_data *d,
-                                            struct userdata *u) {
+static pa_hook_result_t check_access_hook(pa_core *core, pa_access_data *d,
+                                          struct userdata *u,
+                                          snap_access_t required_access) {
     pa_hook_result_t result = PA_HOOK_STOP;
     struct per_client *pc = NULL;
     char *snap_name = NULL;
@@ -277,7 +270,8 @@ static pa_hook_result_t connect_record_h
     pc = pa_hashmap_get(u->clients, (void *)(size_t)d->client_index);
     if (pc) {
         if (pc->completed) {
-            result = pc->grant_access ? PA_HOOK_OK : PA_HOOK_STOP;
+            result = ((pc->access & required_access) == required_access)
+                ? PA_HOOK_OK : PA_HOOK_STOP;
         } else {
             /* A permission check for this snap is currently in progress */
             pa_dynarray_append(pc->pending_requests, d);
@@ -307,19 +301,31 @@ end:
     return result;
 }
 
+static pa_hook_result_t require_record_access_hook(pa_core *core,
+                                                   pa_access_data *d,
+                                                   struct userdata *u) {
+    return check_access_hook(core, d, u, SNAP_ACCESS_RECORD);
+}
+
+static pa_hook_result_t require_control_access_hook(pa_core *core,
+                                                    pa_access_data *d,
+                                                    struct userdata *u) {
+    return check_access_hook(core, d, u, SNAP_ACCESS_CONTROL);
+}
+
 static void deliver_result(struct userdata *u, struct per_client *pc) {
     pa_access_data *ad;
     unsigned i;
 
     pa_log_info("Access check for client %u (%s): %d",
-                pc->index, pc->snap_name, pc->grant_access);
+                pc->index, pc->snap_name, pc->access);
 
     /* Call the hooks without holding the mutex, since this will
-     * recurse into connect_record_hook.  Access to pending_requests
+     * recurse into check_snap_access.  Access to pending_requests
      * should be safe here, since connect_record_hook wont alter the
      * array when the access check is complete. */
     PA_DYNARRAY_FOREACH(ad, pc->pending_requests, i) {
-        ad->async_finish_cb(ad, pc->grant_access);
+        ad->async_finish_cb(ad, pc->access != SNAP_ACCESS_NONE);
     }
     pa_mutex_lock(u->mutex);
     pa_hashmap_remove_and_free(u->clients, (void *) (size_t) pc->index);
@@ -337,22 +343,6 @@ static void check_result(pa_mainloop_api
     pa_asyncq_read_before_poll(u->results);
 }
 
-/* An access control hook that blocks access to snaps */
-static pa_hook_result_t deny_to_snaps_hook(pa_core *core, pa_access_data *d,
-                                           struct userdata *u) {
-    char *snap_name = NULL;
-    bool is_snap;
-
-    snap_name = client_get_snap_name(core, d->client_index);
-    is_snap = snap_name != NULL;
-    pa_xfree(snap_name);
-
-    if (is_snap) {
-        return PA_HOOK_STOP;
-    }
-    return PA_HOOK_OK;
-}
-
 int pa__init(pa_module *m) {
     struct userdata *u;
 
@@ -373,22 +363,22 @@ int pa__init(pa_module *m) {
 
     u->connect_record_hook_slot = pa_hook_connect(
         &m->core->access[PA_ACCESS_HOOK_CONNECT_RECORD], PA_HOOK_NORMAL,
-        (pa_hook_cb_t) connect_record_hook, u);
+        (pa_hook_cb_t) require_record_access_hook, u);
     u->exit_daemon_hook_slot = pa_hook_connect(
         &m->core->access[PA_ACCESS_HOOK_EXIT_DAEMON], PA_HOOK_NORMAL,
-        (pa_hook_cb_t) deny_to_snaps_hook, NULL);
+        (pa_hook_cb_t) require_control_access_hook, u);
     u->get_module_info_hook_slot = pa_hook_connect(
         &m->core->access[PA_ACCESS_HOOK_GET_MODULE_INFO], PA_HOOK_NORMAL,
-        (pa_hook_cb_t) deny_to_snaps_hook, NULL);
+        (pa_hook_cb_t) require_control_access_hook, u);
     u->load_module_hook_slot = pa_hook_connect(
         &m->core->access[PA_ACCESS_HOOK_LOAD_MODULE], PA_HOOK_NORMAL,
-        (pa_hook_cb_t) deny_to_snaps_hook, NULL);
+        (pa_hook_cb_t) require_control_access_hook, u);
     u->unload_module_hook_slot = pa_hook_connect(
         &m->core->access[PA_ACCESS_HOOK_UNLOAD_MODULE], PA_HOOK_NORMAL,
-        (pa_hook_cb_t) deny_to_snaps_hook, NULL);
+        (pa_hook_cb_t) require_control_access_hook, u);
     u->kill_client_hook_slot = pa_hook_connect(
         &m->core->access[PA_ACCESS_HOOK_KILL_CLIENT], PA_HOOK_NORMAL,
-        (pa_hook_cb_t) deny_to_snaps_hook, NULL);
+        (pa_hook_cb_t) require_control_access_hook, u);
 
     /* Start glib thread and wait for it to finish initialising. */
     pa_mutex_lock(u->mutex);
